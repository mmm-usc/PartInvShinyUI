% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helper_item_deletion.R
\name{redistribute_weights}
\alias{redistribute_weights}
\title{Delete item i and redistribute its weight within subscale}
\usage{
redistribute_weights(weights_item, n_dim = 1, n_i_per_dim = NULL, del_i)
}
\arguments{
\item{weights_item}{A vector of item weights.}

\item{n_dim}{Number of dimensions, 1 by default. If the user does not supply
a value, assumes that the scale is unidimensional.}

\item{n_i_per_dim}{A vector containing the number of items in each
dimension; \code{NULL} by default. If the user provides a value for n_dim
that is \eqn{> 1} but leaves \code{n_i_per_dim = NULL}, assumes that
the subscales have an equal number of items.}

\item{del_i}{Index of the item to be deleted.}
}
\value{
\code{new_w} Weights vector with redistributed weights.
}
\description{
\code{redistribute_weights} replaces the item weight with 0 for the item to
be deleted, and redistributes this item's weight across the remaining items.
}
\examples{
one_dim_w <- c(1:7)
redistribute_weights(one_dim_w, del_i = 2)
redistribute_weights(one_dim_w, n_dim = 1, n_i_per_dim = 7, del_i = 2)
sum(one_dim_w)==sum(redistribute_weights(one_dim_w, del_i = 2))

multi_eq_w <- c(1:9)
redistribute_weights(multi_eq_w, n_dim = 3, del_i = 2)
redistribute_weights(multi_eq_w, n_dim = 3, n_i_per_dim = c(3, 3, 3), del_i = 2)
sum(multi_eq_w)==sum(redistribute_weights(multi_eq_w, n_dim = 3, del_i = 2))

multi_uneq_w <- c(1:12)
redistribute_weights(multi_uneq_w, n_dim = 3, n_i_per_dim = c(3, 6, 3), del_i=2)
sum(multi_uneq_w)==sum(redistribute_weights(multi_uneq_w, n_dim = 3,
                                            n_i_per_dim = c(3, 6, 3), del_i=2))
}
